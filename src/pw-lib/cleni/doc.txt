CLENI
Common Lisp to Enigma Interface
G.Assayag - IRCAM - Sep 91

Documentation


Introduction

CLENI is a functional interface between Common Lisp and Finale, the Music Editor from Coda Software. After the user has specified a score using  the CLENI functions, an Enigma Transportable File  (ETF)  will  automatically be generated. ETF's are text files that serve as a portable, machine independent representation for a  Finale score.


Contents

The distribution folder, named CLENI, contains the following files:

Cleni.lisp      the lisp / clos source file
Cleni.fasl      the same compiled
Quatuor.cleni   a sample CLENI  specification. Contains 5 bars of quatuor like music. Find the harmonic mistake!
Template2.etf   a template file in the ETF format; it contains enigma specifications that are the same for every score. Used as a header  to be copied  to the user's target  ETF  file.
Template4.etf   as for template2, but contains the Finale Key Signature Tool parametrization suited to the use of quarter tones (see Finale reference doc.).
DOC     this file.


Installation

The CLENI folder can be installed on any MacIntosh volume as long as Common Lisp is keeped informed of its location through the CL logical pathname "CLENI". Thus,  a call like:

(setf
   (logical-pathname-translations "CLENI")
   '(("**;" "ccl:CLENI;**;"))
has to be found in init.lisp or whatever secondary startup file is used in your environment,
if the CLENI folder has been copied directly under the Common Lisp Application folder on your disk.
See the logical pathname mechanism in Common Lisp documentation for details.


Using CLENI

Before calling any of  CLENI functions, these calls should appear in your program :

(load "CLENI:cleni")
(use-package 'cleni)

in order to have the CLENI  module loaded the first time it is used and it's external symbols known to your current environment. Then create a score through a call to new-score and store it in some place.  Give it a shape and fill it with music events, using successive calls to describe-score. To end with, generate an Enigma Transportable File with translate-score.

describe-score gives a static, hierarchic, description of the score structure with the help of keywords followed by values. The general form  is:

(describe-score my-score
        :temperament  temp
        :staff 1
                :measure 1
                        event 1
                        event 2
                        event 3
                        ...
                :measure 2
                ...
        :staff 2
                :measure 1
                :measure 2
                ...
        ...
)

A descrition can be broken in as many calls to describe-score as is convenient to the calling application, as long as   keyword/value  unitary specifications stay unbroken, and the overall order is respected. Thus, the following set of calls is, as an example, equivalent to the previous one:

(describe-score my-score
        :temperament  temp)

(describe-score my-score
        :staff 1
                :measure 1
                        event 1)

(describe-score my-score
                        event 2
                        event 3
                        ...
                :measure 2
                ...
        :staff 2
                :measure 1
                :measure 2
                ...
        ...)

Object attributes such as the time-signature for a measure or the starting clef for a staff need only be set the first time the object is encountered.

(describe-score my-score
        :staff 1
                :measure 1      :signature '(12 8)
                        ...
                :measure 2
                ...
        :staff 2
                :measure 1      ; no need to set time signature again.
                ...
                :measure 2
                ...
        ...)

The file quatuor.cleni is a ready-to-load example. Just load it , then open the file quatuor.etf under Finale and see what it looks like.


Reference

new-score       [Function]

This function creates and returns  a score object.


describe-score  score-object  &rest score-specification         [Function]

This function  stuffs score-object with the informations given in its following arguments. A score-specification consists of a series of CL keywords, each one denoting either a score feature or a class of events,  followed by one or more qualifying parameters. A secondary keyword may appear in the parameter list. Parameters are evaluated, keywords are not. Legal  keywords, along with their parameters are the following:

:temperament    integer

        sets the temperament for the whole score. integer  is either 2 for half-tone temperament, or  4 for quarter-tone. This keyword must appear before the others. The global variables *half-tone* and *quarter-tone*  may be used as parameter. The default is half-tone.

:staff staff-number [:key starting-key]

        registers a staff. staff-number is a positive integer standing for the staff rank in the system, in a top to bottom order, counting from 1. starting-key indicates a key for the staff and can be chosen among the global variables *G-key*, *C-3-key*, *C-4-key*, *F-key*. The default is G key.

:measure measure-number [:signature time-signature]

        registers a measure. measure-number is a positive integer standing for the measure rank in the score, in a left to right order, counting from 1.  time-signature  should be given in the form of a two integer list (numerator denominator)  in the usual convention (i.e. (3 4) for a 3/4  measure). The default is 4/4.

:open-tuplet    number1 time-unit1 number2 time-unit2

        begins to record a tuplet with the structure:  number1 time-unit1 in the time of  number2 time-unit2.  (e.g. 5 eighth notes in the time of 4 eighth notes).

:close-tuplet

        ends the registration of the tuplet previously began with :open-tuplet. Musical events belonging to the tuplet must be specified between  :open-tuplet and :close-tuplet.

:note   duration   pitch   [:tie] [:follow]

        specify a single note.
        duration  is given as a number with the reference being 1 for the whole-note. ratios are convenient for the usual duration units (1/2 : half-note ... 1/16 : sixteenth-note etc.). 3/8 is a dotted quarter-note (a quarter-note is 1/4 or 2/8) but it could be given as (* 1.5 1/4).
        pitch  is either an integer or a symbol. As an integer it is supposed to represent a pitch in the midi-cents convention. (midi-key * 100 + cent correction. 6050 is middle C plus a quarter-tone.) As a symbol, it is constrained to the following syntax:
                        <note-name> <octave>  [s | b]  [+]*  [-]*
        where note-name is a letter between A and G, octave is an integer, s denotes sharp, b denotes flat, + alters the pitch one unit up, - alters the pitch one unit down. (units depend on the temperament chosen). Examples:  d4s+ is a D4 sharp plus a quarter-tone. c3+--- is equivalent to b2.
        if the :tie keyword appears, the note will be tied to the next one (which is supposed to have the same pitch) thus increasing its duration.
        if the :follow  keyword appears, the note is understood to form a beamed group with the previous note. Otherwise, the note is isolated (default).

:chord  duration   pitch-list   [:tie tie-pattern] [:follow]

        specify a chord. The scheme is identical to the :note's one except that :
        - pitch-list is a list of integer or symbol.
        if :tie appears, then it must be followed by  a tie-pattern i.e. a list of t or nil values serving as tie-flags for each note of the chord, in the same order than  pitch-list. In the following example, c3 and g3 are tied, and e3 is not:
                :chord 1/4 '(c3 e3 g3) :tie '(t nil t)

:rest   duration   [pitch ]  [:follow]

        specify a rest. The pitch  parameter in the case of a rest  allows its vertical positioning on the staff. If not given, it defaults to B4, which is the standard position for G-Key. D3 is the standard position for F-Key and C4 for C-3-Key.


translate-score         score-object   path-name        [Function]

This is the function that actually generate the ETF. score-object has been created and described  using new-score and describe-score. path-name  is a string containing a CL logical pathname specifying the target file. If your file name dosn't contain any extension, it is given the extension .etf which should be the standard extension for ETF's.


Version  notes:

No embedded tuplets are allowed in this version, i.e.  an  :open-tuplet  keyword cannot appear inside a pair  :open-tuplet / :close-tuplet.

No duration consistency checking is made in this version of CLENI. The user is responsible for his music events  not to overflow the measure or the tuplet  they belong to.

Except for G Key, rests have to be positioned manually using the :pitch parameter, othrewise they will appear either too high or too low on the staff. The key dependent default pitch value could be set automatically in future versions.

The lack of documentation on ETF format makes it  an irksome task to undestand. For that  reason only the most basic music attributes have been considered there. This version is anyway sufficient for most  assisted composition  environments that deal with Common Music Notation  since it handles quarter-tones, arbitrarily complex rythm structures and chords and so forth. Future developments may include dynamics, Finale so-called Score Expressions, key signatures (for analysis or neo-??? purposes), key changes  etc.
