(in-package :pw)(make-win 'c-pw-window "40-tutorial" 2752517 38404497 (list (abst 'c-abstract-m 'user-abstraction::abstraction "abstraction" nil 23199915 (list 0 "(10)" 10) '((common-lisp-user::l1? epw::numbers? (:view-size 917540 :value 0 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list))) (list list (:view-size 917540 :doc-string "lst" :value '(10) :dialog-item-text "(1 2)" :type-list (list))) (common-lisp-user::l2? epw::numbers? (:view-size 917540 :value 10 :min-val -9999 :max-val 999999 :doc-string "fx/fl/l" :type-list (fixnum float list)))) 'nil (make-win 'c-pw-window "abstraction" 3670044 25493942 (list (sbox 'c-abstract-in 'absin "absin" nil 458915 (list "list" 2)) (sbox 'c-abstract-out 'absout "absout" nil 21364931 (list "abstraction")) (sbox 'c-pw-functional 'print "print" nil 10682589 (list 0)) (sbox 'c-enum-collect-source 'enum "enum" nil 16973896 (list "(1 2)")) (sbox 'c-reducer 'pwreduce "pwreduce" nil 17367211 (list "foo" "(1 2)" "foo")) (sbox 'c-patch 'g+ "g+" nil 11272509 (list 0 10)) (sbox 'c-patch 'g- "g-" nil 9895964 (list 0 1)) (sbox 'c-pw-functional 'x-append "x-append" nil 14156006 (list "(1 2)" "(1 2)")) (sbox 'c-patch 'arithm-ser "arithm-ser" nil 13041710 (list 1 1 10)) (sbox 'c-enum-collect-source 'enum "accum" nil 3473619 (list "(10)")) (sbox 'c-pw-resize-x 'last-elem "last-elem" nil 7340305 (list "(1 2)") 2228270) (sbox 'c-abstract-in 'absin "absin" nil 7733578 (list "l2?" 3)) (sbox 'c-abstract-in 'absin "absin" nil 6488104 (list "l1?" 1))) (list (list 1 0 4) (list 2 0 9) (list 3 0 8) (list 4 0 9) (list 4 1 7) (list 4 2 3) (list 5 0 10) (list 5 1 11) (list 6 0 12) (list 7 0 2) (list 7 1 5) (list 8 2 6) (list 9 0 0) (list 10 0 9)) nil)) (sbox 'c-patch 'g/ "g/" nil 20447322 (list 0 1)) (sbox 'c-pw-resize-x 'length "length1" nil 17301614 (list "(1 2)") 2228270) (sbox 'c-pw-resize-x 'length "length" nil 17563836 (list "(1 2)") 2228270) (sbox 'c-map-first 'pwmap "pwmap" nil 26148939 (list "foo" "(1 2)")) (sbox 'c-pw-resize-x 'const "const" nil 458780 (list "(25 33 50)") 2228301) (sbox 'c-pw-functional 'quantify "quantify" nil 31326353 (list "(100)" 60 "(4 4)" 8)) (sbox 'c-patch-score-voice 'rtm "rtm" nil 32309529 (list "(4 4)" "((4 (1 1 1 1)))" "(6000)" 60 "nil") nil nil) (sbox 'c-pw-resize-x 'flat "flat" nil 29032543 (list "(1 2)") 2228270) (sbox 'c-enum-collect-source 'enum "enum" nil 3801152 (list "(1 2)")) (sbox 'c-patch-chord-box-m 'chord "chord" nil 6946923 (list (note (list 5500 100 0 0 nil 1 100 nil) (list 5600 100 0 1 nil 1 100 nil) (list 5700 100 0 2 nil 1 100 nil) (list 5800 100 0 3 nil 1 100 nil) (list 5900 100 0 4 nil 1 100 nil) (list 6000 100 0 5 nil 1 100 nil) (list 6100 100 0 6 nil 1 100 nil) (list 6200 100 0 7 nil 1 100 nil) (list 6300 100 0 8 nil 1 100 nil) (list 6400 100 0 9 nil 1 100 nil) (list 6500 100 0 10 nil 1 100 nil) (list 6600 100 0 11 nil 1 100 nil) (list 6700 100 0 12 nil 1 100 nil) (list 6800 100 0 13 nil 1 100 nil) (list 6900 100 0 14 nil 1 100 nil) (list 7000 100 0 15 nil 1 100 nil) (list 7100 100 0 16 nil 1 100 nil) (list 7200 100 0 17 nil 1 100 nil))) nil :order)) (list (list 0 0 1) (list 0 1 9) (list 1 0 2) (list 1 1 3) (list 2 0 10) (list 3 0 5) (list 4 0 9) (list 4 1 0) (list 6 0 8) (list 7 2 10) (list 7 4 6) (list 8 0 4) (list 9 0 5)) t)