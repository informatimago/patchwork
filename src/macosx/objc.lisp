(defpackage "COM.INFORMATIMAGO.OBJC"
  (:use "COMMON-LISP"))
(in-package "COM.INFORMATIMAGO.OBJC")

(eval-when (:compille-toplevel :load-toplevel :execute)
 (defparameter *libobjc*  (ccl:open-shared-library "/usr/lib/libobjc.A.dylib")))

(cffi:defcfun (sel-get-name "sel_getName") :string (sel :pointer))
(cffi:defcfun (sel-register-name "sel_registerName") :pointer (name :string))
(cffi:defcfun (sel-get-uid "sel_getUid") :pointer (name :string))
(cffi:defcfun (sel-is-mapped "sel_isMapped") :bool (sel :pointer))
(cffi:defcfun (object-copy "object_copy") :pointer (self :pointer) (size :unsigned-long))
(cffi:defcfun (object-dispose "object_dispose") :pointer (self :pointer))
(cffi:defcfun (object-get-class "object_getClass") :pointer (self :pointer))
(cffi:defcfun (object-set-class "object_setClass") :pointer (self :pointer) (class :pointer))
(cffi:defcfun (object-is-class "object_isClass") :bool (self :pointer))
(cffi:defcfun (object-get-ivar "object_getIvar") :pointer (self :pointer) (ivar :pointer))
(cffi:defcfun (object-set-ivar "object_setIvar") :void (self :pointer) (ivar :pointer) (value :pointer))
(cffi:defcfun (object-set-instance-variable "object_setInstanceVariable") :pointer (self :pointer) (name :string) (value :pointer))
(cffi:defcfun (object-get-instance-variable "object_getInstanceVariable") :pointer (self :pointer) (name :string) (out-value (:pointer :pointer)))
(cffi:defcfun (object-set-ivar-with-strong-default "object_setIvarWithStrongDefault") :void (self :pointer) (ivar :pointer) (value :pointer))
(cffi:defcfun (object-set-instance-variable-with-strong-default "object_setInstanceVariableWithStrongDefault") :pointer (self :pointer) (name :string) (value :pointer))
(cffi:defcfun (object-get-class "object_getClass") :pointer (name :string))
(cffi:defcfun (objc-get-meta-class "objc_getMetaClass") :pointer (name :string))
(cffi:defcfun (objc-look-up-class "objc_lookUpClass") :pointer (name :string))
(cffi:defcfun (objc-get-required-class "objc_getRequiredClass") :pointer (name :string))
(cffi:defcfun (objc-get-class-list "objc_getClassList") :int (buffer :pointer) (bufferCount :int))
(cffi:defcfun (objc-copy-class-list "objc_copyClassList") :pointer (out-count (:pointer :unsigned-int)))
(cffi:defcfun (class-get-name "class_getName") :string (class :pointer))
(cffi:defcfun (class-is-meta-class "class_isMetaClass") :bool (class :pointer))
(cffi:defcfun (class-get-version "class_getVersion") :int (class :pointer))
(cffi:defcfun (class-set-version "class_setVersion") :void (class :pointer) (version :int))
(cffi:defcfun (class-get-instance-size "class_getInstanceSize") :unsigned-long (class :pointer))
(cffi:defcfun (class-get-instance-variable "class_getInstanceVariable") :pointer (class :pointer) (name :string))
(cffi:defcfun (class-get-class-variable "class_getClassVariable") :pointer (class :pointer) (name :string))
(cffi:defcfun (class-copy-ivar-list "class_copyIvarList") (:pointer :pointer) (class :pointer) (out-count (:pointer :unsigned-int)))
(cffi:defcfun (class-get-instance-method "class_getIntanceMethod") :pointer (class :pointer) (sel :pointer))
(cffi:defcfun (class-get-class-method "class_getClassMethod") :pointer (class :pointer) (sel :pointer))
(cffi:defcfun (class-get-method-implementation "class_getMethodImplementation") :pointer (class :pointer) (sel :pointer))
(cffi:defcfun (class-get-method-implementation-stret "class_getMethodImplementation_stret") :pointer (class :pointer) (sel :pointer))
(cffi:defcfun (class-responds-to-selector "class_respondsToSelector") :bool (class :pointer) (sel :pointer))
(cffi:defcfun (class-copy-method-list "class_copyMethodList") (:pointer :pointer) (class :pointer) (out-count (:pointer :unsigned-int)))
(cffi:defcfun (class-conforms-to-protocol "class_conformsToProtocol") :bool (class :pointer) (protocol :pointer))
(cffi:defcfun (class-copy-protocol-list "class_copyProtocolList") (:pointer :pointer) (class :pointer) (out-count (:pointer :unsigned-int)))
(cffi:defcfun (class-get-property "class_getProperty") :pointer (class :pointer) (name :string))
(cffi:defcfun (class-copy-property-list "class_copyPropertyList") (:pointer :pointer) (class :pointer) (out-count (:pointer :unsigned-int)))
(cffi:defcfun (class-get-ivar-layout "class_getIvarLayout") (:pointer :uchar) (class :pointer))
(cffi:defcfun (class-get-weak-ivar-layout "class_getWeakIvarLayout") (:pointer :uchar) (class :pointer))
(cffi:defcfun (class-add-method "class_addMethod") :bool (class :pointer) (sel :pointer) (imp :pointer) (types :string))
(cffi:defcfun (class-replace-method "class_replaceMethod") :pointer (class :pointer) (sel :pointer) (imp :pointer) (types :string))
(cffi:defcfun (class-add-ivar "class_addIvar") :bool (class :pointer) (name :string) (size :unsigned-long) (alignment :uchar) (types :string))
(cffi:defcfun (class-add-protocol "class_addProtocol") :bool (class :pointer) (protocol :pointer))
(cffi:defcfun (class-add-property "class_addProperty") :bool (class :pointer) (name :string) (attributes :pointer) (attributeCount :unsigned-int))
(cffi:defcfun (class-add-property "class_replaceProperty") :void (class :pointer) (name :string) (attributes :pointer) (attributeCount :unsigned-int))
(cffi:defcfun (class-set-ivar-layout "class_setIvarLayout") :void (class :pointer) (layout (:pointer :uchar)))
(cffi:defcfun (class-set-weak-ivar-layout "class_setWeakIvarLayout") :void (class :pointer) (layout (:pointer :uchar)))
(cffi:defcfun (objc-get-future-class "objc_getFutureClass") :pointer (name :string))
(cffi:defcfun (class-create-instance "class_createInstance") :pointer (class :pointer) (extra-bytes :unsigned-long))
(cffi:defcfun (objc-construct-instance "objc_constructInstance") :pointer (class :pointer) (bytes :pointer))
(cffi:defcfun (objc-destruct-instance "objc_destructInstance") :pointer (class :pointer))
(cffi:defcfun (objc-allocate-class-pair "objc_allocateClassPair") :pointer (superclass :pointer) (name :string) (extra-bytes :unsigned-long))
(cffi:defcfun (objc-register-class-pair "objc_registerClassPair") :void (class :pointer))
(cffi:defcfun (objc-duplicate-class "objc_duplicateClass") :pointer (class :pointer) (name :string) (extra-bytes :unsigned-long))
(cffi:defcfun (objc-dispose-class-pair "objc_disposeClassPair") :void (class :pointer))
(cffi:defcfun (method-get-name "method_getName") :string (method :pointer))
(cffi:defcfun (method-get-implementation "method_getImplementation") :pointer (method :pointer))
(cffi:defcfun (method-get-type-encoding "method_getTypeEncoding") :string (method :pointer))
(cffi:defcfun (method-get-number-of-arguments "method_getNumberOfArguments") :unsigned-int (method :pointer))
(cffi:defcfun (method-copy-return-type "method_copyReturnType") :string (method :pointer))
(cffi:defcfun (method-copy-argument-type "method_copyArgumentType") :string (method :pointer) (index :unsigned-int))
(cffi:defcfun (method-get-return-type "method_getReturnType") :void (method :pointer) (outString :pointer) (outStringSize :unsigned-long))
(cffi:defcfun (method-get-argument-type "method_getArgumentType") :void (method :pointer) (index :unsigned-int) (outString :pointer) (outStringSize :unsigned-long))
(cffi:defcfun (method-get-description "method_getDescription") :pointer (method :pointer))
(cffi:defcfun (method-set-implementation "method_setImplementation") :pointer (method :pointer) (imp :pointer))
(cffi:defcfun (method-exchange-implementation "method_exchangeImplementations") :void (method1 :pointer) (method2 :pointer))
(cffi:defcfun (ivar-get-name "ivar_getName") :string (ivar :pointer))
(cffi:defcfun (ivar-get-type-encoding "ivar_getTypeEncoding") :string (ivar :pointer))
(cffi:defcfun (ivar-get-offset "ivar_getOffset") :long (ivar :pointer))
(cffi:defcfun (property-get-name "property_getName") :string (property :pointer))
(cffi:defcfun (property-get-attributes "property_getAttributes") :string (property :pointer))
(cffi:defcfun (property-copy-attribute-list "property_copyAttributeList") (:pointer :pointer) (ivar :pointer) (out-count (:pointer :unsigned-int)))
(cffi:defcfun (property-copy-attribute-value "property_copyAttributeValue") :string (ivar :pointer) (attribute-name :string))
(cffi:defcfun (objc-get-protocol "objc_getProtocol") :pointer (name :string))
(cffi:defcfun (objc-copy-protocol-list "objc_copyProtocolList") (:pointer :pointer) (out-count (:pointer :unsigned-int)))
(cffi:defcfun (protocol-conforms-to-protocol "protocol_conformsToProtocol") :bool (protocol :pointer) (other-protocol :pointer))
(cffi:defcfun (protocol-is-equal "protocol_isEqual") :bool (protocol :pointer) (other-protocol :pointer))
(cffi:defcfun (protocol-get-name "protocol_getName") :string (protocol :pointer))
(cffi:defcfun (protocol-get-method-description "protocol_getMethodDescription") :pointer (protocol :pointer) (sel :pointer) (is-required-method :bool) (is-instance-method :bool))
(cffi:defcfun (protocol-copy-method-description-list "protocol_copyMethodDescriptionList") :pointer (protocol :pointer) (is-required-method :bool) (is-instance-method :bool) (out-count (:pointer :unsigned-int)))
(cffi:defcfun (protocol-get-property "protocol_getProperty") :pointer (protocol :pointer) (name :string) (is-required-property :bool) (is-instance-property :bool))
(cffi:defcfun (protocol-get-property-list "protocol_getPropertyList") (:pointer :pointer) (protocol :pointer) (out-count (:pointer :unsigned-int)))
(cffi:defcfun (protocol-get-property-list-2 "protocol_getPropertyList2") (:pointer :pointer) (protocol :pointer) (out-count (:pointer :unsigned-int)) (is-required-property :bool) (is-instance-property :bool))
(cffi:defcfun (protocol-copy-protocol-list "protocol_copyProtocolList") (:pointer :pointer) (protocol :pointer) (out-count (:pointer :unsigned-int)))
(cffi:defcfun (objc-allocate-protocol "objc_allocateProtocol") :pointer (name :string))
(cffi:defcfun (objc-register-protocol "objc_registerProtocol") :void (protocol :pointer))
(cffi:defcfun (protocol-add-method-description "protocol_addMethodDescription") :void (protocol :pointer) (sel :pointer) (types :string) (is-required-method :bool) (is-instance-method :bool))
(cffi:defcfun (protocol-add-protocol "protocol_addProtocol") :void (protocol :pointer) (addition :pointer))
(cffi:defcfun (protocol-add-property "protocol_addProperty") :void (protocol :pointer) (name :string) (attributes :pointer) (attribute-count :unsigned-int) (is-required-property :bool) (is-instance-property :bool))


(cffi:defcfun (object-get-class-name "object_getClassName") :string (id :pointer))
(cffi:defcfun (object-get-indexed-ivars "object_getIndexedIvars") :pointer (id :pointer))

