;; -*- mode:rst -*-

###########################
Mclgui Implementation Notes
###########################


Mechanisms
==========

Actions can be initiated from two sides:

- either from the OpenStep side (ie. upon user events processed by
  OpenStep), 

- or from the MclGui side.

For example, the user may move a window, which sends a
``windowDidMove:` notification to the delegate, which is used to call
`set-view-position`.  On the other hand, the program may call
`set-view-position` itself, which then calls `-[NSWindow
setFrame:display:]`.  Care should be taken to avoid infinite loops.

Unfortunately, because both the MclGUI and the OpenStep API are
imposed, there's no generic way to deal with this.  OpenStep classes
manage most of the events alone, and report to the program either
nothing, a notification thru a delegate message, or just a plain
instance message (which we must implement in a subclass to catch).
Sometimes an opportunity to cancel the action is given, sometimes not.
Similarly MclGUI provides primary methods, or event-handler methods.
But the same principle applies: the lower layer calls the upper layers
and the upper layer calls the lower layer, with care to avoid an
infinite loop.




Window Closing
--------------

- `-[NSWindow performClose:]` calls `-[MclguiWindow windowShouldClose:]`.

- `-[MclguiWindow windowShouldClose:]` calls `window-close-event-handler`.

- `window-close-event-handler` calls `window-close` or `window-hide` or cancels.

- `-[MclguiWindow close]` calls `window-close`.

- `window-close` calls `-[MclguiWindow doClose]`, and removes it from
  the window list and releases it.

- `-[MclguiWindow doClose]` calls `-[NSWindow close]`.



Window Zooming
--------------

- `-[MclguiWindow windowShouldZoom:toFrame:]`  returns `YES` iff
  `window-type` is `:document-with-zoom`.

- `window-zoom-event-handler` calls `-[MclguiWindow zoom:]`.

- `-[MclguiWindow zoom:]` calls `[super zoom]` and `window-do-zoom`.

- `window-do-zoom` calls `window-size-parts`.


Window Moving
-------------

- if `*window-moving*` is `nil` then `(set-view-position window)` calls
  `-[MclguiWindow setFrame:]` which calls `-[NSWindow setFrameOrigin:]`

- eventually, or upon user moving action, the window sends a
  `windowDidMove:` notification to the delegate (class
  MclguiWindowDelegate).

- the delegate sets a `window-grow-event-handler` message to the window.

-  `window-grow-event-handler` binds `*window-growing*` to true and
   calls `set-view-position`.



Window Resizing (Growing)
-------------------------

- if `*window-growing*` is `nil` then `(set-view-size window)` calls
  `-[MclguiWindow setFrame:]` which calls `-[NSWindow setFrame:display:]`

- eventually, or upon user resizing action, the window sends a
  `windowDidResize:` notification to the delegate (class
  MclguiWindowDelegate).

- the delegate sets a `window-grow-event-handler` message to the window.

-  `window-grow-event-handler` binds `*window-growing*` to true and
   calls `set-view-size`.




Window Activating
-----------------

- `-[MclguiWindow becomeMainWindow]` calls `view-activate-event-handler`

- `-[MclguiWindow resignMainWindow]` calls `view-deactivate-event-handler`

- `window-select`  

- `window-select-event-handler`




Message Mapping
===============

::

    (setf (slot-value window 'view-position))                 <-- (windowDidMove:(:id)nsnotification)
    (setf (slot-value window 'view-size))                     <-- (windowDidResize:(:id)nsnotification)


    (defgeneric view-activate-event-handler (view))           <-- -[MclguiWindow becomeMain]
    (defgeneric view-deactivate-event-handler (view))         <-- -[MclguiWindow resignMain]
    (defgeneric view-draw-contents (view))                    <-- -[MclguiWindow drawRect:(:<NSR>ect)rect]
    (defgeneric view-key-event-handler (view key))            <-- -[MclguiWindow keyDown:]
    (defgeneric view-click-event-handler (view where))        <-- -[MclguiView mouseDown:]
    (defgeneric view-mouse-position (view))                   --> +[NSEvent mouseLocation] + coordinate convertions.

    (defgeneric window-close-event-handler (window))          <-- -[MclguiWindow windowShouldClose:]
    (defgeneric window-zoom-event-handler (window message))   --> -[MclguiWindow zoom:]
    (defgeneric window-grow-event-handler (window where))     --> set-view-size --> [MclguiWindow setFrame:]

    (defgeneric window-mouse-up-event-handler (window))       <-- -[MclguiView mouseUp:]      (used in patchwork)
    (defgeneric window-null-event-handler (window))           <-- -[MclguiView mouseDragged:] (used in patchwork as mouse moved)
                                                          
    (defgeneric window-key-up-event-handler (window))            (not used in patchwork)
    (defgeneric window-drag-event-handler (window where))        (not used in patchwork)

    (defgeneric window-select-event-handler (window))        --> window-select         (not used in patchwork).
    (defgeneric window-update-event-handler (window))        --> view-draw-contents

    (defgeneric window-do-first-click (window))               no corresponding feature (not used in patchwork).
    (defgeneric window-draw-grow-icon (window))               no corresponding feature (not used in patchwork).




Other applications using MCL GUI
================================

OM-5.2.1

Error Messages
==============

::

   (step-notrace ui::object-identity ui::call-print-parseable-object)


#+BEGIN_SRC(lisp)


#+END_SRC

.. comment  
                    -----------------------------
                            -------------
                                  -
                                  .
